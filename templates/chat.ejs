<% layout('./layout/page') -%>
  <% block('title', 'Чат'); -%>

    <p class="lead">Здесь будет чат</p>
    <script src="vendor/bower_components/socket.io-client/dist/socket.io.js"></script>

    <div id="room" > 
    <p id="status" ></p>
      <ul></ul>
      <form>
        <input class="form-control" autocomplete="off" autofocus placeholder="Cообщение..." >
      </form>
    </div>

    <script>
      const form = document.querySelector('#room form');
      const ul = document.querySelector('#room ul');
      const statusIndication = document.getElementById('status');
      const input = document.querySelector('#room input');
      const socket = io.connect('', {
        reconnect: false,
      });

    socket
    .on("message", function(username, message) {
      printMessage( username + ': ' + message);
    })
    .on('join', function(username) {
      printMessage(username + ' вошел в чат');
    })
    .on('leave', function(username) {
      printMessage(username + ' вышел из чата');
    })
    .on('connect', function() {
      printStatus("соединение установлено");
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
      })
      input.disabled = false;
    })
    .on('disconnect', function() {
      printStatus("соединение потеряно");
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
      });
      input.disabled = true;
      setTimeout(reconnect, 500);
    })
    // .on('error', function(reason) {
    //     if (reason == "handshake unauthorized") {
    //       printStatus("вы вышли из сайта");
    //     } else {
    //       setTimeout(function() {
    //         socket.socket.connect();
    //       }, 500);
    //     }
    //   });

    function sendMessage() {
      let text = input.value; 
      socket.emit('message', text, function() {
        printMessage('я: ' + text);
      });
      input.value = '';
      return false;
    }

    function reconnect() {
      socket.once('error', function() {
        setTimeout(reconnect, 500);
      });
      socket.socket.connect(); 
    }

    function printStatus(status) {
      statusIndication.innerText = status
    }

    function printMessage(text) {
      var element = document.createElement("li");
      element.innerText = text
      ul.appendChild(element);
    }

    </script>
